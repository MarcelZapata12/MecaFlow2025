@model IEnumerable<MecaFlow2025.Models.Factura>
@using System.Globalization
@{
    ViewData["Title"] = "Facturas";
    var cr = new CultureInfo("es-CR");
    var userRole = ViewBag.UserRole as string;
    var isClient = userRole == "Cliente";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

<style>
    body {
        /* background: linear-gradient(135deg, #0f2027, #203a43, #2c5364); */
        color: #f8f9fa;
        animation: gradient 15s ease infinite;
        background-size: 400% 400%;
    }

    @@keyframes gradient {
        0% {
            background-position: 0% 50%;
        }

        50% {
            background-position: 100% 50%;
        }

        100% {
            background-position: 0% 50%;
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(0.95);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
            box-shadow: 0 0 0 0 rgba(13,110,253,.4);
        }

        70% {
            transform: scale(1.05);
            box-shadow: 0 0 0 10px rgba(13,110,253,0);
        }

        100% {
            transform: scale(1);
            box-shadow: 0 0 0 0 rgba(13,110,253,0);
        }
    }

    .factura-card {
        background-color: #1f1f1f;
        border: 1px solid #2c2c2c;
        color: white;
        border-radius: 1rem;
        transition: transform .3s ease, box-shadow .3s ease;
        margin-bottom: 1rem;
        position: relative;
        animation: fadeInUp .5s ease-in-out;
    }

        .factura-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,.3);
        }

    .facturas-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1rem;
    }

    .form-control:focus {
        background-color: #2c2c2c;
        color: #fff;
        border-color: #66afe9;
        box-shadow: 0 0 0 .2rem rgba(102,175,233,.25);
    }

    .card-footer a, .card-footer button {
        transition: transform .2s ease;
    }

        .card-footer a:hover, .card-footer button:hover {
            transform: scale(1.2);
        }

    .icon-btn {
        background: none;
        border: none;
        padding: 0;
        font-size: 1.25rem;
        color: inherit;
    }

    .action-icons {
        position: absolute;
        top: .75rem;
        right: 1rem;
        display: flex;
        gap: .75rem;
        z-index: 2;
    }

        .action-icons form {
            display: inline;
        }

    .modal-content {
        background-color: #1f1f1f;
        color: white;
        animation: fadeIn .3s ease-in-out;
    }

    .btn-pulse {
        animation: pulse 2s infinite;
    }

    .client-info-banner {
        background: linear-gradient(135deg, #17a2b8, #138496);
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .no-facturas-message {
        text-align: center;
        padding: 3rem;
        color: #adb5bd;
    }

        .no-facturas-message i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }
</style>

<div class="container py-4">
    @if (isClient)
    {
        <div class="client-info-banner">
            <h4><i class="bi bi-person-check me-2"></i>Mis Facturas</h4>
            <p class="mb-0">Aquí puedes ver la información de todas tus facturas y servicios realizados en nuestro taller.</p>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-white">
            <i class="bi bi-receipt me-2"></i>@(isClient ? "Mis Facturas" : "Facturas")
        </h2>
        <div class="d-flex align-items-center">
            <input id="facturaSearch" type="search"
                   class="form-control form-control-sm me-3 bg-dark text-white border-secondary"
                   placeholder="Buscar por @(isClient ? "fecha, vehículo o método de pago" : "cliente, vehículo o método de pago")…" />

            @if (!isClient)
            {
                <a href="#" class="btn btn-primary btn-pulse" onclick="loadFacturaCreate()">
                    <i class="bi bi-plus-circle me-1"></i>Nueva Factura
                </a>
            }
        </div>
    </div>

    @if (TempData["Ok"] is string ok && !string.IsNullOrWhiteSpace(ok))
    {
        <div class="alert alert-success">@ok</div>
    }
    @if (TempData["Error"] is string err && !string.IsNullOrWhiteSpace(err))
    {
        <div class="alert alert-danger">@err</div>
    }

    @if (!Model.Any())
    {
        <div class="no-facturas-message">
            <i class="bi bi-receipt"></i>
            <h4>@(isClient ? "No tienes facturas registradas" : "No hay facturas registradas")</h4>
            <p>@(isClient ? "Las facturas aparecerán aquí cuando se registren servicios para tus vehículos." : "Comienza agregando una nueva factura al sistema.")</p>
        </div>
    }
    else
    {
        <div id="facturasGrid" class="facturas-grid">
            @foreach (var item in Model)
            {
                <div class="factura-card card p-3">
                    <div class="action-icons">
                        <a href="#" class="text-info icon-btn" title="Detalles" onclick="openFacturaDetails(@item.FacturaId)">
                            <i class="bi bi-eye"></i>
                        </a>
                        @if (!isClient)
                        {
                            <a href="#" class="text-warning icon-btn" title="Editar" onclick="loadFacturaEdit(@item.FacturaId)">
                                <i class="bi bi-pencil-square"></i>
                            </a>
                            <button type="button" class="icon-btn text-danger" title="Eliminar" onclick="confirmFacturaDelete(@item.FacturaId)">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        }
                    </div>

                    <h5 class="card-title" style="color:#66ccff;font-weight:700;">
                        <i class="bi bi-hash me-1"></i>Factura #@item.FacturaId
                    </h5>
                    <p class="card-text mb-1"><i class="bi bi-calendar3 me-1 text-secondary"></i><strong>Fecha:</strong> @item.Fecha.ToString("dd/MM/yyyy")</p>
                    @if (!isClient)
                    {
                        <p class="card-text mb-1"><i class="bi bi-person-fill me-1 text-secondary"></i><strong>Cliente:</strong> @item.Cliente?.Nombre</p>
                    }
                    <p class="card-text mb-1"><i class="bi bi-car-front-fill me-1 text-secondary"></i><strong>Vehículo:</strong> @item.Vehiculo?.Placa</p>
                    <p class="card-text mb-1"><i class="bi bi-credit-card me-1 text-secondary"></i><strong>Método:</strong> @(string.IsNullOrWhiteSpace(item.Metodo) ? "-" : item.Metodo)</p>
                    <p class="card-text small text-muted">
                        <i class="bi bi-currency-dollar me-1"></i>
                        @item.MontoTotal.ToString("C", cr)
                    </p>
                </div>

                <!-- Modal Details (uno por item) -->
                <div class="modal fade" id="facturaDetails-@item.FacturaId" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Detalles de la Factura</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                            </div>
                            <div class="modal-body" id="facturaDetailsBody-@item.FacturaId">
                                <p class="text-center">Cargando…</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Toast de éxito -->
<div class="toast align-items-center text-bg-success border-0 position-fixed bottom-0 end-0 m-3" id="toastSuccess" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">¡Acción realizada con éxito!</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
    </div>
</div>

@if (!isClient)
{
    <!-- Modales comunes (solo para admin/empleado) -->
    <div class="modal fade" id="facturaEdit" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content">
                <div class="modal-header"><h5 class="modal-title">Editar Factura</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
                <div class="modal-body" id="facturaEditBody"><p class="text-center">Cargando…</p></div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="facturaCreate" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content">
                <div class="modal-header"><h5 class="modal-title">Nueva Factura</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
                <div class="modal-body" id="facturaCreateBody"><p class="text-center">Cargando…</p></div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="facturaDelete" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header"><h5 class="modal-title">Confirmar eliminación</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar esta factura?</p>
                    <form id="facturaDeleteForm" method="post">
                        <input type="hidden" name="id" id="facturaDeleteId" />
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button class="btn btn-danger" onclick="submitFacturaDelete()">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        const isClient = @(isClient.ToString().ToLower());

        // BÚSQUEDA CLIENT-SIDE
        document.getElementById('facturaSearch').addEventListener('input', function () {
            const q = this.value.toLowerCase();
            document.querySelectorAll('#facturasGrid .factura-card').forEach(function (card) {
                const txt = card.innerText.toLowerCase();
                card.style.display = txt.includes(q) ? '' : 'none';
            });
        });

        // DETALLES (carga en modal por ítem)
        function openFacturaDetails(id) {
            const modalId = `facturaDetails-${id}`;
            const bodyId = `facturaDetailsBody-${id}`;
            const modal = new bootstrap.Modal(document.getElementById(modalId));
            const body = document.getElementById(bodyId);
            body.innerHTML = "<p class='text-center'>Cargando…</p>";
            modal.show();

            fetch(`/Facturas/Details/${id}`)
                .then(r => r.text())
                .then(html => { body.innerHTML = html; })
                .catch(() => { body.innerHTML = `<div class="alert alert-danger">Error al cargar detalles</div>`; });
        }

        // Funciones solo para admin/empleado
        if (!isClient) {
            // CREAR (carga en modal)
            function loadFacturaCreate() {
                const modal = new bootstrap.Modal(document.getElementById('facturaCreate'));
                const body = document.getElementById('facturaCreateBody');
                body.innerHTML = "<p class='text-center'>Cargando…</p>";
                modal.show();

                fetch(`/Facturas/Create`)
                    .then(r => r.text())
                    .then(html => {
                        body.innerHTML = html;
                        initFacturaCreateEvents();
                    })
                    .catch(() => { body.innerHTML = `<div class="alert alert-danger">Error al cargar el formulario</div>`; });
            }

            // Función para inicializar eventos en el formulario de crear factura
            function initFacturaCreateEvents() {
                const vehiculoSelect = document.querySelector('#facturaCreateBody #vehiculoSelect');
                const tareasContainer = document.querySelector('#facturaCreateBody #tareasContainer');

                if (vehiculoSelect && tareasContainer) {
                    vehiculoSelect.addEventListener('change', async function() {
                        const vehiculoId = this.value;

                        if (!vehiculoId) {
                            tareasContainer.innerHTML = '<div class="p-3 text-muted">Seleccione un vehículo para cargar sus tareas…</div>';
                            return;
                        }

                        try {
                            tareasContainer.innerHTML = '<div class="p-3 text-muted">Cargando tareas…</div>';

                            const response = await fetch(`/Facturas/TareasPorVehiculo?vehiculoId=${vehiculoId}`);
                            if (response.ok) {
                                const html = await response.text();
                                tareasContainer.innerHTML = html;
                            } else {
                                tareasContainer.innerHTML = '<div class="p-3 text-danger">Error al cargar las tareas</div>';
                            }
                        } catch (error) {
                            tareasContainer.innerHTML = '<div class="p-3 text-danger">Error al cargar las tareas</div>';
                        }
                    });

                    // Si ya hay un vehículo seleccionado, cargar sus tareas
                    if (vehiculoSelect.value) {
                        vehiculoSelect.dispatchEvent(new Event('change'));
                    }
                }
            }

            // EDITAR (carga en modal)
            function loadFacturaEdit(id) {
                const modal = new bootstrap.Modal(document.getElementById('facturaEdit'));
                const body = document.getElementById('facturaEditBody');
                body.innerHTML = "<p class='text-center'>Cargando…</p>";
                modal.show();

                fetch(`/Facturas/Edit/${id}`)
                    .then(r => r.text())
                    .then(html => { body.innerHTML = html; })
                    .catch(() => { body.innerHTML = `<div class="alert alert-danger">Error al cargar el formulario</div>`; });
            }

            // ELIMINAR (AJAX + mensaje en modal)
            function confirmFacturaDelete(id) {
                const modal = new bootstrap.Modal(document.getElementById('facturaDelete'));
                const form = document.getElementById('facturaDeleteForm');
                const body = document.querySelector('#facturaDelete .modal-body');

                const oldAlert = body.querySelector('.alert');
                if (oldAlert) oldAlert.remove();

                document.getElementById('facturaDeleteId').value = id;
                form.action = `/Facturas/Delete/${id}`;
                modal.show();
            }

            function submitFacturaDelete() {
                const form = document.getElementById('facturaDeleteForm');
                const body = document.querySelector('#facturaDelete .modal-body');

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                .then(r => r.json())
                .then(data => {
                    if (data.success) {
                        const modalEl = document.getElementById('facturaDelete');
                        const modal = bootstrap.Modal.getInstance(modalEl);
                        modal?.hide();
                        showSuccessToast();
                        location.reload();
                    } else {
                        const old = body.querySelector('.alert'); if (old) old.remove();
                        const alert = document.createElement('div');
                        alert.className = 'alert alert-warning';
                        alert.textContent = data.message || 'No se pudo eliminar la factura.';
                        body.prepend(alert);
                    }
                })
                .catch(() => {
                    const old = body.querySelector('.alert'); if (old) old.remove();
                    const alert = document.createElement('div');
                    alert.className = 'alert alert-danger';
                    alert.textContent = 'Ocurrió un error al intentar eliminar.';
                    body.prepend(alert);
                });
            }

            // Submit AJAX del Create (mantiene el modal abierto con errores)
            document.addEventListener('submit', function (e) {
                const form = e.target;
                const esCreateEnModal =
                    form.closest('#facturaCreateBody') &&
                    form.action.includes('/Facturas/Create');
                if (!esCreateEnModal) return;

                e.preventDefault();

                const body = document.getElementById('facturaCreateBody');

                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form),
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                .then(async (r) => {
                    const ct = r.headers.get('content-type') || '';

                    // Éxito: JSON { success: true }
                    if (ct.includes('application/json')) {
                        const data = await r.json();
                        if (data.success) {
                            const modalEl = document.getElementById('facturaCreate');
                            const modal = bootstrap.Modal.getInstance(modalEl);
                            modal?.hide();
                            showSuccessToast();
                            location.reload();
                            return;
                        }
                    }

                    // Errores de validación: llega HTML parcial -> reinyectar en el modal
                    const html = await r.text();
                    body.innerHTML = html;
                    // Reinicializar eventos después de recargar el HTML
                    initFacturaCreateEvents();
                })
                .catch(() => {
                    body.innerHTML = `<div class="alert alert-danger">Error al guardar. Intenta de nuevo.</div>`;
                });
            });
        }

        // TOAST ÉXITO (disponible para todos)
        function showSuccessToast() {
            new bootstrap.Toast(document.getElementById('toastSuccess')).show();
        }

        // Hacer funciones globales para que funcionen desde onclick
        window.loadFacturaCreate = loadFacturaCreate;
        window.loadFacturaEdit = loadFacturaEdit;
        window.confirmFacturaDelete = confirmFacturaDelete;
        window.submitFacturaDelete = submitFacturaDelete;
        window.openFacturaDetails = openFacturaDetails;
    </script>
}