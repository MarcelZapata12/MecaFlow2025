@model MecaFlow2025.Models.Factura
@{
    ViewData["Title"] = "Nueva Factura";
    var hoy = (DateOnly)ViewBag.Hoy;
    Layout = null;
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

<style>
    body {
        background-color: transparent;
        color: #f8f9fa;
    }

    .modal-form-container {
        background-color: #1f1f1f;
        border-radius: 1rem;
        padding: 2rem;
    }

    .form-control, .form-select {
        background-color: #2a2a2a;
        border: 1px solid #444;
        color: #f8f9fa;
    }

        .form-control:focus, .form-select:focus {
            background-color: #2a2a2a;
            border-color: #66afe9;
            box-shadow: 0 0 0 0.2rem rgba(102,175,233,.25);
        }

        /* ← evita “cuadro blanco” en readonly/disabled */
        .form-control[readonly],
        .form-control:disabled,
        .form-select:disabled {
            background-color: #2a2a2a !important;
            color: #fff !important;
            opacity: 1 !important;
            -webkit-text-fill-color: #fff;
        }

    input[type="date"].form-control,
    input[type="date"].form-control[readonly],
    input[type="date"].form-control:disabled {
        background-color: #2a2a2a !important;
        color: #fff !important;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background-color: #565e64;
            border-color: #4e555b;
        }

    label {
        font-weight: 600;
    }

    /* Tabla de tareas */
    .tareas-table thead th {
        position: sticky;
        top: 0;
        z-index: 1;
        background-color: #2a2a2a;
        color: #f8f9fa;
    }

    .tareas-table td, .tareas-table th {
        white-space: nowrap;
        border-color: #444;
    }

    .tareas-table .desc {
        white-space: normal;
    }

    .tareas-table {
        background-color: #2a2a2a;
        color: #f8f9fa;
    }

        .tareas-table tbody tr:hover {
            background-color: #333;
        }
</style>

<div class="modal-form-container">
    @if (TempData["Error"] is string err && !string.IsNullOrWhiteSpace(err))
    {
        <div class="alert alert-danger">@err</div>
    }

    <form id="formFactura" asp-action="Create" asp-controller="Facturas" method="post">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="All" class="text-danger mb-3"></div>

        <div class="row g-3">
            <div class="col-md-6">
                <label asp-for="ClienteId" class="form-label">Cliente</label>
                <select asp-for="ClienteId" class="form-select" asp-items="ViewBag.ClienteId">
                    <option value="">-- Seleccione --</option>
                </select>
                <span asp-validation-for="ClienteId" class="text-danger"></span>
            </div>

            <div class="col-md-6">
                <label asp-for="VehiculoId" class="form-label">Vehículo</label>
                <select asp-for="VehiculoId" class="form-select" asp-items="ViewBag.VehiculoId" id="vehiculoSelect">
                    <option value="">-- Seleccione --</option>
                </select>
                <span asp-validation-for="VehiculoId" class="text-danger"></span>
            </div>

            <div class="col-md-4">
                <label class="form-label">Fecha</label>
                <!-- Muestra bonita -->
                <input class="form-control" value="@hoy.ToString("dd/MM/yyyy")" readonly />
                <!-- Valor que viaja al servidor (DateOnly => yyyy-MM-dd) -->
                <input type="hidden" name="Fecha" value="@hoy.ToString("yyyy-MM-dd")" />
            </div>

            <div class="col-md-4">
                <label asp-for="MontoTotal" class="form-label">Monto Total</label>
                <input asp-for="MontoTotal" class="form-control" type="number" step="0.01" min="0" />
                <span asp-validation-for="MontoTotal" class="text-danger"></span>
            </div>

            <div class="col-md-4">
                <label asp-for="Metodo" class="form-label">Método de pago</label>
                <select asp-for="Metodo" class="form-select"
                        asp-items="@(ViewData["Metodos"] as Microsoft.AspNetCore.Mvc.Rendering.SelectList)">
                    <option value="">-- Seleccione --</option>
                </select>
                <span asp-validation-for="Metodo" class="text-danger"></span>
            </div>

            <div class="col-12">
                <h5 class="mt-3">Tareas realizadas al vehículo</h5>
                <div id="tareasContainer" class="card shadow-sm" style="background-color:#2a2a2a; border-color:#444;">
                    <div class="p-3 text-muted">Seleccione un vehículo para cargar sus tareas…</div>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-end mt-4">
            <button type="submit" class="btn btn-primary me-2" id="btnGuardar">
                <i class="bi bi-plus-circle me-1"></i>Crear
            </button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                <i class="bi bi-x-lg me-1"></i>Cancelar
            </button>
        </div>
    </form>
</div>

<script>
    (() => {
        const tareasContainer = document.getElementById('tareasContainer');
        const vehiculoSelect  = document.getElementById('vehiculoSelect');

        async function cargarTareas(vehiculoId) {
            if (!vehiculoId) {
                tareasContainer.innerHTML = '<div class="p-3 text-muted">Seleccione un vehículo para cargar sus tareas…</div>';
                return;
            }
            try {
                tareasContainer.innerHTML = '<div class="p-3 text-muted">Cargando tareas…</div>';
                const resp = await fetch(`/Facturas/TareasPorVehiculo?vehiculoId=${encodeURIComponent(vehiculoId)}`, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });
                tareasContainer.innerHTML = resp.ok
                    ? await resp.text()
                    : '<div class="p-3 text-danger">Error al cargar las tareas</div>';
            } catch (e) {
                console.error(e);
                tareasContainer.innerHTML = '<div class="p-3 text-danger">Error al cargar las tareas</div>';
            }
        }

        vehiculoSelect?.addEventListener('change', e => cargarTareas(e.target.value));

        // Si ya viene uno seleccionado por defecto:
        if (vehiculoSelect && vehiculoSelect.value) {
            cargarTareas(vehiculoSelect.value);
        }
    })();
</script>
