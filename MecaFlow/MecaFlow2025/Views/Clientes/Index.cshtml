@model IEnumerable<MecaFlow2025.Models.Cliente>

@{
    ViewData["Title"] = "Clientes";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

<style>
    body {
        background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
        color: #f8f9fa;
        animation: gradient 15s ease infinite;
        background-size: 400% 400%;
    }

    @@keyframes gradient {
        0% {
            background-position: 0% 50%
        }

        50% {
            background-position: 100% 50%
        }

        100% {
            background-position: 0% 50%
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px)
        }

        to {
            opacity: 1;
            transform: translateY(0)
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(.95)
        }

        to {
            opacity: 1;
            transform: scale(1)
        }
    }

    .client-card {
        background-color: #1f1f1f;
        border: 1px solid #2c2c2c;
        color: white;
        border-radius: 1rem;
        transition: transform .3s ease, box-shadow .3s ease;
        margin-bottom: 1rem;
        position: relative;
        animation: fadeInUp .5s ease-in-out;
    }

        .client-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,.3);
        }

    .client-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1rem;
    }

    .form-control:focus {
        background-color: #2c2c2c;
        color: #fff;
        border-color: #66afe9;
        box-shadow: 0 0 0 .2rem rgba(102,175,233,.25);
    }

    .icon-btn {
        background: none;
        border: none;
        padding: 0;
        font-size: 1.25rem;
        color: inherit;
    }

    .action-icons {
        position: absolute;
        top: .75rem;
        right: 1rem;
        display: flex;
        gap: .75rem;
        z-index: 2;
    }

    .modal-content {
        background-color: #1f1f1f;
        color: white;
        animation: fadeIn .3s ease-in-out;
    }
</style>

<div class="container py-4">

    <!-- 🔔 Alertas de servidor -->
    @if (TempData["Error"] is string err && !string.IsNullOrWhiteSpace(err))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>@err
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["Success"] is string ok && !string.IsNullOrWhiteSpace(ok))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>@ok
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Encabezado sin botón de crear -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="text-white">
            <i class="bi bi-people-fill me-2"></i>Clientes
        </h2>
        <div class="d-flex align-items-center">
            <input id="clientSearch" type="search" class="form-control form-control-sm bg-dark text-white border-secondary" placeholder="Buscar por nombre o correo…">
        </div>
    </div>

    <!-- Grid de tarjetas -->
    <div id="clientsGrid" class="client-grid">
        @foreach (var c in Model)
        {
            <div id="cliente-@c.ClienteId" class="client-card card p-3">
                <div class="action-icons">
                    <a href="#" class="text-info icon-btn" title="Detalles" onclick="openClienteDetails(@c.ClienteId)"><i class="bi bi-eye"></i></a>
                    <a href="#" class="text-warning icon-btn" title="Editar" onclick="loadClienteEdit(@c.ClienteId)"><i class="bi bi-pencil-square"></i></a>
                    <button type="button" class="icon-btn text-danger" title="Eliminar" onclick="confirmClienteDelete(@c.ClienteId)">
                        <i class="bi bi-trash-fill"></i>
                    </button>
                </div>

                <h5 class="card-title" style="color:#66ccff;font-weight:700;">
                    <i class="bi bi-person-circle me-1"></i>@c.Nombre
                </h5>

                <p class="card-text mb-1"><i class="bi bi-envelope-fill me-1 text-secondary"></i>@c.Correo</p>
                <p class="card-text mb-1"><i class="bi bi-telephone-fill me-1 text-secondary"></i>@c.Telefono</p>
                <p class="card-text mb-1"><i class="bi bi-geo-alt-fill me-1 text-secondary"></i>@c.Direccion</p>
                <p class="card-text small text-muted">
                    <i class="bi bi-calendar-check me-1"></i>
                    @(c.FechaRegistro.HasValue? c.FechaRegistro.Value.ToString("dd/MM/yyyy") : "—")
                </p>
            </div>

            <!-- Modal Details -->
            <div class="modal fade" id="clienteDetails-@c.ClienteId" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Detalles del Cliente</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body" id="clienteDetailsBody-@c.ClienteId">
                            <p class="text-center">Cargando…</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Toast de éxito -->
<div class="toast align-items-center text-bg-success border-0 position-fixed bottom-0 end-0 m-3" id="toastSuccess" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">¡Acción realizada con éxito!</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
    </div>
</div>

<!-- Modales para editar y eliminar (sin modal de crear) -->
<div class="modal fade" id="clienteEdit" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">Editar Cliente</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
            <div class="modal-body" id="clienteEditBody"><p class="text-center">Cargando…</p></div>
        </div>
    </div>
</div>

<div class="modal fade" id="clienteDelete" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">Confirmar eliminación</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
            <div class="modal-body">
                <p>¿Estás seguro de que deseas eliminar este cliente?</p>
                <form id="clienteDeleteForm" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" id="clienteDeleteId" />
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button class="btn btn-danger" onclick="submitClienteDelete()">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        /* ===========================
           Búsqueda rápida
           =========================== */
        document.getElementById('clientSearch').addEventListener('input', function () {
            const q = this.value.toLowerCase();
            document.querySelectorAll('#clientsGrid .client-card').forEach(function (card) {
                const txt = card.innerText.toLowerCase();
                card.style.display = txt.includes(q) ? '' : 'none';
            });
        });

        /* ===========================
           EDIT (modal + AJAX nativo)
           =========================== */
        function loadClienteEdit(id) {
            const modalEl = document.getElementById('clienteEdit');
            const modal   = new bootstrap.Modal(modalEl);
            const body    = document.getElementById('clienteEditBody');

            body.innerHTML = "<p class='text-center'>Cargando…</p>";
            modal.show();

            fetch(`/Clientes/Edit/${id}`)
              .then(r => r.text())
              .then(html => { body.innerHTML = html; hookEditForm(); })
              .catch(() => { body.innerHTML = `<div class="alert alert-danger">Error al cargar el formulario</div>`; });
        }

        function hookEditForm() {
            const form = document.querySelector('#clienteEditBody form');
            if (!form) return;
            form.addEventListener('submit', onEditSubmit, { once: true });
        }

        async function onEditSubmit(e) {
            e.preventDefault();
            const form = e.currentTarget;
            const fd   = new FormData(form);

            try {
                const res = await fetch(form.action, {
                    method: 'POST',
                    body: fd,
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });

                const ct = res.headers.get('content-type') || '';
                if (ct.includes('application/json')) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('clienteEdit'));
                    if (modal) modal.hide();
                    location.reload();
                    return;
                }

                const html = await res.text();
                const body = document.getElementById('clienteEditBody');
                body.innerHTML = html;
                hookEditForm();
            } catch {
                document.getElementById('clienteEditBody').innerHTML =
                  `<div class="alert alert-danger">No se pudo enviar el formulario.</div>`;
            }
        }

        /* ===========================
           DETALLES
           =========================== */
        function openClienteDetails(id) {
            const modalId = `clienteDetails-${id}`;
            const bodyId  = `clienteDetailsBody-${id}`;
            const modal   = new bootstrap.Modal(document.getElementById(modalId));
            const body    = document.getElementById(bodyId);
            body.innerHTML = "<p class='text-center'>Cargando…</p>";
            modal.show();

            fetch(`/Clientes/Details/${id}`)
                .then(r => r.text())
                .then(html => { body.innerHTML = html; })
                .catch(() => { body.innerHTML = `<div class="alert alert-danger">Error al cargar detalles</div>`; });
        }

        /* ===========================
           ELIMINAR
           =========================== */
        function confirmClienteDelete(id) {
            const modal = new bootstrap.Modal(document.getElementById('clienteDelete'));
            document.getElementById('clienteDeleteId').value = id;
            document.getElementById('clienteDeleteForm').action = `/Clientes/Delete/${id}`;
            modal.show();
        }
        function submitClienteDelete() {
            document.getElementById('clienteDeleteForm').submit();
        }

        /* ===========================
           TOAST
           =========================== */
        function showSuccessToast() {
            new bootstrap.Toast(document.getElementById('toastSuccess')).show();
        }

        // Mostrar toast si hay Success en TempData
        @{
                if (TempData["Success"] is string)
                {
                        <text>showSuccessToast();</text>
                }

        }
    </script>
}