@model IEnumerable<MecaFlow2025.Models.Empleado>

@{
    ViewData["Title"] = "Empleados";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

<style>
    body {
        /* background: linear-gradient(135deg, #0f2027, #203a43, #2c5364); */
        color: #f8f9fa;
        animation: gradient 15s ease infinite;
        background-size: 400% 400%;
    }

    @@keyframes gradient {
        0% {
            background-position: 0% 50%
        }

        50% {
            background-position: 100% 50%
        }

        100% {
            background-position: 0% 50%
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px)
        }

        to {
            opacity: 1;
            transform: translateY(0)
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(.95)
        }

        to {
            opacity: 1;
            transform: scale(1)
        }
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
            box-shadow: 0 0 0 0 rgba(13,110,253,.4)
        }

        70% {
            transform: scale(1.05);
            box-shadow: 0 0 0 10px rgba(13,110,253,0)
        }

        100% {
            transform: scale(1);
            box-shadow: 0 0 0 0 rgba(13,110,253,0)
        }
    }

    .empleado-card {
        background-color: #1f1f1f;
        border: 1px solid #2c2c2c;
        color: white;
        border-radius: 1rem;
        transition: transform .3s ease, box-shadow .3s ease;
        margin-bottom: 1rem;
        position: relative;
        animation: fadeInUp .5s ease-in-out;
    }

        .empleado-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,.3);
        }

    .empleado-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1rem;
    }

    .form-control:focus {
        background-color: #2c2c2c;
        color: #fff;
        border-color: #66afe9;
        box-shadow: 0 0 0 .2rem rgba(102,175,233,.25);
    }

    .icon-btn {
        background: none;
        border: none;
        padding: 0;
        font-size: 1.25rem;
        color: inherit;
        line-height: 1;
    }

    /* ===== Encabezado flexible (evita que el nombre tape los botones) ===== */
    .empleado-card .header-flex {
        display: flex;
        align-items: flex-start;
        gap: .75rem;
        margin-bottom: .25rem;
    }

    .empleado-card .title-ellipsis {
        margin: 0;
        display: flex;
        align-items: center;
        gap: .5rem;
        flex: 1 1 auto; /* ocupa espacio disponible */
        min-width: 0; /* necesario para ellipsis en flex */
        color: #66ccff;
        font-weight: 700;
    }

        .empleado-card .title-ellipsis .name {
            display: inline-block;
            min-width: 0;
            max-width: 100%;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
    /* Reutilizamos tu clase .action-icons pero SIN position absolute aquí */
    .empleado-card .action-icons {
        position: static; /* ← quita absolute */
        top: auto;
        right: auto;
        display: flex;
        gap: .5rem;
        z-index: auto;
        flex-shrink: 0; /* no se encoge */
    }

    .modal-content {
        background-color: #1f1f1f;
        color: white;
        animation: fadeIn .3s ease-in-out;
    }

    .btn-pulse {
        animation: pulse 2s infinite;
    }

    .empty-results {
        color: #9ca3af;
        padding: .75rem 0;
    }
</style>

<div class="container py-4">

    <!-- 🔔 Alertas de servidor -->
    @if (TempData["Error"] is string err && !string.IsNullOrWhiteSpace(err))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>@err
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["Success"] is string ok && !string.IsNullOrWhiteSpace(ok))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>@ok
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["RoleUpdated"] is string roleMsg && !string.IsNullOrWhiteSpace(roleMsg))
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i>@roleMsg
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Contenedor para alertas dinámicas -->
    <div id="dynamicAlerts"></div>

    <!-- Encabezado -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="text-white">
            <i class="bi bi-people-fill me-2"></i>Empleados
        </h2>
        <div class="d-flex align-items-center">
            <input id="txtBuscar" type="search" class="form-control form-control-sm me-3 bg-dark text-white border-secondary" placeholder="Buscar por nombre o correo…">
            <button class="btn btn-primary btn-pulse" id="btn-create" data-url="@Url.Action("Create", "Empleados")">
                <i class="bi bi-plus-circle me-1"></i>Nuevo Empleado
            </button>
        </div>
    </div>

    <!-- Grid de tarjetas -->
    <div id="cardsContainer" class="empleado-grid">
        @if (Model != null && Model.Any())
        {
            foreach (var e in Model.OrderBy(x => x.Nombre))
            {
                var ingreso = e.FechaIngreso.HasValue ? e.FechaIngreso.Value.ToString("dd/MM/yyyy") : "—";
                var registro = e.FechaRegistro.HasValue ? e.FechaRegistro.Value.ToString("dd/MM/yyyy") : "—";

                <div class="empleado-card card p-3"
                     data-nombre="@((e.Nombre ?? "").ToLower())"
                     data-correo="@((e.Correo ?? "").ToLower())">

                    <!-- Encabezado FLEX: nombre con ellipsis + acciones a la derecha -->
                    <div class="header-flex">
                        <h5 class="title-ellipsis">
                            <i class="bi bi-person-circle"></i>
                            <span class="name">@e.Nombre</span>
                        </h5>
                        <div class="action-icons">
                            <button type="button" class="text-info icon-btn btn-details"
                                    title="Detalles"
                                    data-url="@Url.Action("Details", "Empleados", new { id = e.EmpleadoId })">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button type="button" class="text-warning icon-btn btn-edit"
                                    title="Editar"
                                    data-url="@Url.Action("Edit", "Empleados", new { id = e.EmpleadoId })">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button type="button" class="icon-btn text-danger btn-delete"
                                    title="Eliminar"
                                    data-url="@Url.Action("Delete", "Empleados", new { id = e.EmpleadoId })">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        </div>
                    </div>

                    <p class="card-text mb-1"><i class="bi bi-envelope-fill me-1 text-secondary"></i>@e.Correo</p>
                    <p class="card-text mb-1"><i class="bi bi-credit-card-2-front me-1 text-secondary"></i>@e.Cedula</p>
                    <p class="card-text mb-1"><i class="bi bi-briefcase-fill me-1 text-secondary"></i>@(string.IsNullOrWhiteSpace(e.Puesto) ? "—" : e.Puesto)</p>
                    <p class="card-text small text-muted">
                        <i class="bi bi-calendar-check me-1"></i>
                        @(string.IsNullOrEmpty(registro) ? ingreso : registro)
                    </p>

                    <span class="position-absolute bottom-0 end-0 m-3 @(e.Activo ? "badge-soft" : "badge-soft-off")"
                          style="background-color: @(e.Activo ? "rgba(16,185,129,.15)" : "rgba(239,68,68,.12)");
                                         color: @(e.Activo ? "#34d399" : "#f87171");
                                         border: 1px solid @(e.Activo ? "rgba(16,185,129,.25)" : "rgba(239,68,68,.25)");
                                         padding:.25rem .5rem; border-radius:.5rem; font-weight:700; font-size:.78rem;">
                        @(e.Activo ? "Activo" : "Inactivo")
                    </span>
                </div>
            }
        }
        else
        {
            <div class="empty-results">No hay empleados registrados.</div>
        }
    </div>
</div>

<!-- Toast de éxito -->
<div class="toast align-items-center text-bg-success border-0 position-fixed bottom-0 end-0 m-3" id="toastSuccess" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">¡Acción realizada con éxito!</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
    </div>
</div>

<!-- Modales comunes -->
<div class="modal fade" id="modalCrud" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title" id="modalCrudTitle">...</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
            <div class="modal-body" id="modalCrudBody"><p class="text-center">Cargando…</p></div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        /* ===========================
           Búsqueda rápida
           =========================== */
        document.getElementById('txtBuscar').addEventListener('input', function () {
            const q = this.value.toLowerCase();
            document.querySelectorAll('#cardsContainer .empleado-card').forEach(function (card) {
                const txt = card.innerText.toLowerCase();
                card.style.display = txt.includes(q) ? '' : 'none';
            });
        });

        /* ===========================
           FUNCIÓN PARA MOSTRAR BANNER DE ERROR
           =========================== */
        function showErrorBanner(message) {
            const alertsContainer = document.getElementById('dynamicAlerts');
            alertsContainer.innerHTML = '';
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-danger alert-dismissible fade show';
            alertDiv.setAttribute('role', 'alert');
            alertDiv.innerHTML = `
                <i class="bi bi-exclamation-triangle-fill me-2"></i>${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            alertsContainer.appendChild(alertDiv);
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        /* ===========================
           MODALES (jQuery + AJAX)
           =========================== */
        const modalEl = document.getElementById('modalCrud');
        const modal = new bootstrap.Modal(modalEl);
        const modalBody = document.getElementById('modalCrudBody');
        const modalTitle = document.getElementById('modalCrudTitle');

        function openModal(url, title){
            modalTitle.innerText = title;
            modalBody.innerHTML = "<p class='text-center'>Cargando…</p>";
            modal.show();

            fetch(url)
              .then(r => r.text())
              .then(html => {
                  modalBody.innerHTML = html;
                  hookAjaxForm();
              })
              .catch(() => {
                  modalBody.innerHTML = `<div class="alert alert-danger">Error al cargar el contenido.</div>`;
              });
        }

        function hookAjaxForm(){
            const form = modalBody.querySelector("form");
            if (!form) return;

            form.addEventListener("submit", async function(ev){
                ev.preventDefault();
                const fd = new FormData(form);

                try {
                    const res = await fetch(form.action, {
                        method: 'POST',
                        body: fd,
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });

                    const ct = res.headers.get('content-type') || '';
                    if (ct.includes('application/json')) {
                        const resp = await res.json();

                        if (resp && resp.ok) {
                            modal.hide();
                            if (resp.roleUpdated) {
                                const alertDiv = document.createElement('div');
                                alertDiv.className = 'alert alert-success alert-dismissible fade show position-fixed';
                                alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
                                alertDiv.innerHTML = `
                                    <i class="bi bi-check-circle-fill me-2"></i>
                                    <strong>¡Rol actualizado!</strong><br>
                                    Tu rol se ha cambiado a ${resp.newRole}. La página se recargará para aplicar los cambios.
                                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                `;
                                document.body.appendChild(alertDiv);
                                setTimeout(() => { window.location.reload(); }, 2000);
                            } else {
                                location.reload();
                            }
                        } else if (resp && resp.error) {
                            modal.hide();
                            showErrorBanner(resp.error);
                        }
                    } else {
                        const html = await res.text();
                        modalBody.innerHTML = html;
                        hookAjaxForm();
                    }
                } catch {
                    modal.hide();
                    showErrorBanner('Ocurrió un error inesperado.');
                }
            });
        }

        document.getElementById("btn-create").addEventListener("click", function(){
            openModal(this.dataset.url, "Nuevo Empleado");
        });

        document.addEventListener("click", function(event){
            const target = event.target.closest(".btn-edit, .btn-details, .btn-delete");
            if (target){
                let title = "";
                if (target.classList.contains("btn-edit")) title = "Editar Empleado";
                else if (target.classList.contains("btn-details")) title = "Detalle de Empleado";
                else if (target.classList.contains("btn-delete")) title = "Eliminar Empleado";
                openModal(target.dataset.url, title);
            }
        });

        /* ===========================
           TOAST
           =========================== */
        function showSuccessToast() {
            new bootstrap.Toast(document.getElementById('toastSuccess')).show();
        }

        @if (TempData["Success"] is string)
        {
                <text>showSuccessToast();</text>
        }
    </script>
}
